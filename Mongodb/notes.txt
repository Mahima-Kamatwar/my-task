//create

use: use command is used for switching into/creating a new database

use data_name

database

collections

create collecion: db.createCollection("collection_name")

document

db.collection.insertOne({name: "person1", phone: 9766696550, age: 23, address: "nagpur"})

show collections
show dbs

db.students.insertOne(
    {
        _id: 3,
        name: "mahi",
        phone : 9022836184,
        age : 20,
        address: {
            street: "plot 4, sharda layout",
            city: "nagpur",
            pincode: "440024",
            state: "Maharashtra"
        }
    }
) 

db -> ecommerce website

customers

db.customers.insertMany([
    { _id: 1, name: "rashi ingale", phone: "9754396550", address: "reshimbagh" },
    { _id: 2, name: "nisha raut", phone: "8853296120", address: "mhalgi nagar" },
    { _id: 3, name: "mahima kamatwar", phone: "9252678266", address: "dighori" }
])

products

db.products.insertMany([
    {_id:11, name : "pencil", stock: 100, selling_price : 20, discount: 5},
    {_id:12, name : "pen", stock: 100, selling_price : 30, discount: 5},
    {_id:13, name : "Book", stock: 100, selling_price : 45, discount: 5},
    {_id:14, name : "Marker", stock: 100, selling_price : 55, discount: 5}
])

orders

db.orders.insertOne({
    _id: 42, 
    boughtBy: {customerId: 1},
    products:[
        {productId: 11, qty: 2, subTotal : 95},
        {productId: 14, qty: 1, subTotal : 97.5}
    ],
    shipingAddress: {
        street: "plot 4, sharda layout",
        city: "nagpur",
        pincode: "440024",
        state: "Maharashtra"
    },
    timeStamp: Date.now()
})

//read

db.collection.findOne() -> null / object
db.collection.find() -> [] / [object/s]

query

{}-> un conditionally -> everything

{ field: "match something" }

comparision oprators

1..$gt - greater than
2..$gte - greater than equals
3..$lt - less than
4..$lte - less than equals
5..$in - for range
6..$nin - not in range
7..$eq - equals
8..$ne - not equals


1..db.products.find({ selling_price: { $gt: 30 } })
[
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 },
  {
    _id: 14,
    name: 'Marker',
    stock: 100,
    selling_price: 55,
    discount: 5
  }
]

2..db.products.find({ selling_price: { $gte: 45 } })
[
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 },
  {
    _id: 14,
    name: 'Marker',
    stock: 100,
    selling_price: 55,
    discount: 5
  }
]

3..db.products.find({ selling_price: { $lt: 45 } })[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 }
]

4..db.products.find({ selling_price: { $lte: 30 } })[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 }
]

5..db.products.find({ selling_price: { $in: [20, 45] } })[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 }
]

db.products.find({selling_price: {$in: [20, 55]}})
[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discont: 5
  },
  {
    _id: 14,
    name: 'Marker',
    stock: 100,
    selling_price: 55,
    discont: 5
  }
]

6..db.products.find({ selling_price: { $nin: [20, 55] } })
[
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 },
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 },
  {
    _id: ObjectId('68efbd3745580bc6d6cebea4'),
    name: 'pen',
    discount: 5
  },
  { _id: 15, name: 'pen', discount: 5 }
]

db.products.find({selling_price: {$nin: [20, 55]}})
[
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discont: 5 },
  {
    _id: 13,
    name: 'Book',
    stock: 100,
    selling_price: 45,
    discont: 5
  }
]

7..db.products.find({ selling_price: { $eq: 30 } })[
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 }
]

8..db.products.find({ selling_price: { $ne: 30 } })
[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 },
  {
    _id: 14,
    name: 'Marker',
    stock: 100,
    selling_price: 55,
    discount: 5
  },
  {
    _id: ObjectId('68efbd3745580bc6d6cebea4'),
    name: 'pen',
    discount: 5
  },
  { _id: 15, name: 'pen', discount: 5 }
]


logical oprators

$and
$or
$nor
$not

$or:
db.products.find({ $or :[ {selling_price:  20} , {selling_price : {$gte:35}} ]})
[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 },
  {
    _id: 14,
    name: 'Marker',
    stock: 100,
    selling_price: 55,
    discount: 5
  }
]

$not:
db.products.find({ selling_price: { $not: { $gt: 40 } } })
[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 },
  {
    _id: ObjectId('68efbd3745580bc6d6cebea4'),
    name: 'pen',
    discount: 5
  },
  { _id: 15, name: 'pen', discount: 5 }
]

$nor:
db.products.find({ $nor: [{ name: "pen" }, { selling_price: { $gt: 50 } }] })
[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 }
]


find({query},{projection}).count()
find({query},{projection}).limit(number)
find({query},{projection}).sort({field: -1(decending)/1(Ascending)})

Projection:
db.products.find({}, { selling_price: 1, _id: 0 })
[
  { selling_price: 20 },
  { selling_price: 30 },
  { selling_price: 45 },
  { selling_price: 55 },
  {},
  {}
]

Count:
db.products.countDocuments()
6

 db.products.find(
   { $nor: [{ name: "pen" }, { selling_price: { $gt: 50 } }] },
   { name: 1, _id: 0 }
 ).count()

2

Limit:
 db.products.find().limit(2)
[
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 }
]

sort:Ascending
db.products.find().sort({ selling_price: 1 })
[
  {
    _id: ObjectId('68efbd3745580bc6d6cebea4'),
    name: 'pen',
    discount: 5
  },
  { _id: 15, name: 'pen', discount: 5 },
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 },
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 },
  {
    _id: 14,
    name: 'Marker',
    stock: 100,
    selling_price: 55,
    discount: 5
  }
]

sort:decending
db.products.find().sort({ selling_price: -1 })
[
  {
    _id: 14,
    name: 'Marker',
    stock: 100,
    selling_price: 55,
    discount: 5
  },
  { _id: 13, name: 'Book', stock: 100, selling_price: 45, discount: 5 },
  { _id: 12, name: 'pen', stock: 100, selling_price: 30, discount: 5 },
  {
    _id: 11,
    name: 'pencil',
    stock: 100,
    selling_price: 20,
    discount: 5
  },
  {
    _id: ObjectId('68efbd3745580bc6d6cebea4'),
    name: 'pen',
    discount: 5
  },
  { _id: 15, name: 'pen', discount: 5 }
]

Array operations

[1.example]
db.languages.find({scope:"Web Development"})
[
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebea4'),
    id: 1,
    name: 'JavaScript',
    duration: '3 months',
    difficulty: 'Medium',
    scope: [ 'Web Development', 'Frontend', 'Backend', 'Full Stack' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebea5'),
    id: 2,
    name: 'Python',
    duration: '3 months',
    difficulty: 'Easy',
    scope: [ 'Data Science', 'AI', 'Web Development', 'Automation' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebeaa'),
    id: 7,
    name: 'PHP',
    duration: '3 months',
    difficulty: 'Medium',
    scope: [ 'Web Development', 'Backend', 'CMS' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebeab'),
    id: 8,
    name: 'Ruby',
    duration: '3 months',
    difficulty: 'Medium',
    scope: [ 'Web Development', 'Backend' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebed0'),
    id: 45,
    name: 'Flask',
    duration: '2 months',
    difficulty: 'Easy',
    scope: [ 'Web Development', 'APIs', 'Backend' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebed1'),
    id: 46,
    name: 'Django',
    duration: '3 months',
    difficulty: 'Medium',
    scope: [ 'Web Development', 'Backend', 'Full Stack' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebed4'),
    id: 49,
    name: 'ASP.NET',
    duration: '3 months',
    difficulty: 'Medium',
    scope: [ 'Web Development', 'Enterprise Apps' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebeda'),
    id: 55,
    name: 'jQuery',
    duration: '1 month',
    difficulty: 'Easy',
    scope: [ 'Frontend', 'Web Development' ]
  }
]

[2.example]
db.languages.find({ $or:[{scope:"Web Servers"},{scope:"Database"}]})
[
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebec0'),
    id: 29,
    name: 'MongoDB',
    duration: '1 month',
    difficulty: 'Easy',
    scope: [ 'Database', 'Full Stack' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebec1'),
    id: 30,
    name: 'MySQL',
    duration: '1 month',
    difficulty: 'Easy',
    scope: [ 'Database', 'Backend' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebec2'),
    id: 31,
    name: 'PostgreSQL',
    duration: '1 month',
    difficulty: 'Medium',
    scope: [ 'Database', 'Backend' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebf03'),
    id: 96,
    name: 'Nginx',
    duration: '2 months',
    difficulty: 'Medium',
    scope: [ 'Web Servers', 'Load Balancing' ]
  },
  {
    _id: ObjectId('68f130bbd4d2b7d9eecebf04'),
    id: 97,
    name: 'Apache',
    duration: '2 months',
    difficulty: 'Medium',
    scope: [ 'Web Servers', 'Hosting' ]
  }
]

ElemMatch : more than one query in Array

[1.example]
db.studentsData.insertMany([
  {
    name: "student1",
    roll: 1,
    subjects: [
      { name: "english", score: 70 },
      { name: "maths", score: 40 },
      { name: "science", score: 45 },
      { name: "history", score: 48 }
    ]
  },
  {
    name: "student2",
    roll: 2,
    subjects: [
      { name: "Civics", score: 40 },
      { name: "maths", score: 30 },
      { name: "Hindi", score: 35 },
      { name: "history", score: 48 }
    ]
  }
]);

[2.example]
db.studentsData.find({
   subjects: {
     $elemMatch: {
       name: "maths",
       score: { $lt: 40 }
     }
   }
 });

[
  {
    _id: ObjectId('68f135ced4d2b7d9eecebf0a'),
    name: 'student2',
    roll: 2,
    subjects: [
      { name: 'Civics', score: 40 },
      { name: 'maths', score: 30 },
      { name: 'Hindi', score: 35 },
      { name: 'history', score: 48 }
    ]
  },
  {
    _id: ObjectId('68f1361ad4d2b7d9eecebf0c'),
    name: 'student2',
    roll: 2,
    subjects: [
      { name: 'Civics', score: 40 },
      { name: 'maths', score: 30 },
      { name: 'Hindi', score: 35 },
      { name: 'history', score: 48 }
    ]
  },
  {
    _id: ObjectId('68f13786d4d2b7d9eecebf0e'),
    name: 'student2',
    roll: 2,
    subjects: [
      { name: 'Civics', score: 40 },
      { name: 'maths', score: 30 },
      { name: 'Hindi', score: 35 },
      { name: 'history', score: 48 }
    ]
  }
]

[3.example]
 db.studentsData.find({
  subjects: {
    $elemMatch: {
      score: { $gte: 40, $lte: 50 }
    }
  }
    });

[
  {
    _id: ObjectId('68f135ced4d2b7d9eecebf09'),
    name: 'student1',
    roll: 1,
    subjects: [
      { name: 'english', score: 50 },
      { name: 'maths', score: 40 },
      { name: 'science', score: 45 },
      { name: 'history', score: 48 }
    ]
  },
  {
    _id: ObjectId('68f135ced4d2b7d9eecebf0a'),
    name: 'student2',
    roll: 2,
    subjects: [
      { name: 'Civics', score: 40 },
      { name: 'maths', score: 30 },
      { name: 'Hindi', score: 35 },
      { name: 'history', score: 48 }
    ]
  },
  {
    _id: ObjectId('68f1361ad4d2b7d9eecebf0b'),
    name: 'student1',
    roll: 1,
    subjects: [
      { name: 'english', score: 70 },
      { name: 'maths', score: 40 },
      { name: 'science', score: 45 },
      { name: 'history', score: 48 }
    ]
  },
  {
    _id: ObjectId('68f1361ad4d2b7d9eecebf0c'),
    name: 'student2',
    roll: 2,
    subjects: [
      { name: 'Civics', score: 40 },
      { name: 'maths', score: 30 },
      { name: 'Hindi', score: 35 },
      { name: 'history', score: 48 }
    ]
  },
  {
    _id: ObjectId('68f13786d4d2b7d9eecebf0d'),
    name: 'student1',
    roll: 1,
    subjects: [
      { name: 'english', score: 70 },
      { name: 'maths', score: 40 },
      { name: 'science', score: 45 },
      { name: 'history', score: 48 }
    ]
  },
  {
    _id: ObjectId('68f13786d4d2b7d9eecebf0e'),
    name: 'student2',
    roll: 2,
    subjects: [
      { name: 'Civics', score: 40 },
      { name: 'maths', score: 30 },
      { name: 'Hindi', score: 35 },
      { name: 'history', score: 48 }
    ]
  }
]